---
import Layout from "../../layouts/Layout.astro";
import "../../styles/global.css";
---

<Layout title="wall Drawing">
    <main>
        <div id="wall-wrapper">
           
        </div>
    </main>
</Layout>

<script>
    import { THREE } from "../../scripts/imports.js";
    import { TextureLoader } from "three";

    import { CanvasTexture } from "three";
    // Create the mesh
    let canvasdom = document.querySelector("#wall-wrapper");
    let camera, scene, renderer;
    let mesh;
    const AMOUNT = 4;

    init();
    animate();

    function init() {
        const ASPECT_RATIO = window.innerWidth / window.innerHeight;

        const WIDTH = (window.innerWidth / AMOUNT) * window.devicePixelRatio;
        const HEIGHT = (window.innerHeight / AMOUNT) * window.devicePixelRatio;

        const cameras = [];

        for (let y = 0; y < AMOUNT; y++) {
            for (let x = 0; x < AMOUNT; x++) {
                const subcamera = new THREE.PerspectiveCamera(
                    40,
                    ASPECT_RATIO,
                    0.1,
                    10,
                );
                subcamera.viewport = new THREE.Vector4(
                    Math.floor(x * WIDTH),
                    Math.floor(y * HEIGHT),
                    Math.ceil(WIDTH),
                    Math.ceil(HEIGHT),
                );
                subcamera.position.x = 0;
                subcamera.position.y = 0;
                subcamera.position.z = 1;
                subcamera.position.multiplyScalar(2);
                subcamera.lookAt(0, 0, 0);
                subcamera.updateMatrixWorld();
                cameras.push(subcamera);
            }
        }

        camera = new THREE.ArrayCamera(cameras);
        camera.position.z = 2;

        scene = new THREE.Scene();
        const geometryBackground = new THREE.PlaneGeometry(100, 100);
        const materialBackground = new THREE.MeshBasicMaterial({
            color: 0x2e2e2e,
        });

        const background = new THREE.Mesh(
            geometryBackground,
            materialBackground,
        );
        background.receiveShadow = true;
        background.position.set(0, 0, -1);
        scene.add(background);

        let data ="./sphere.png"
        const texture = new THREE.TextureLoader().load(data);
        // const frameBox = new THREE.BoxGeometry(1, 1, 0.5);
        const materialCylinder = new THREE.MeshBasicMaterial({
            // map: texture,
            color: 0xf2eecb,
        });

        // Create the main frame
        var width = 1;
        var height = 1;
        var depth = 0.1;
        var frameGeometry = new THREE.BoxGeometry(width, height, depth);

     
        // Add all meshes to the scene

        mesh = new THREE.Mesh(frameGeometry, materialCylinder);
        mesh.position.set(0, 0, 0.2); // Set the z-position to -0.9
        scene.add(
            mesh,
        );

        renderer = new THREE.WebGLRenderer();
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMap.enabled = true;
        canvasdom.appendChild(renderer.domElement);

        //

        window.addEventListener("resize", onWindowResize);
    }

    function onWindowResize() {
        const ASPECT_RATIO = window.innerWidth / window.innerHeight;
        const WIDTH = (window.innerWidth / AMOUNT) * window.devicePixelRatio;
        const HEIGHT = (window.innerHeight / AMOUNT) * window.devicePixelRatio;

        camera.aspect = ASPECT_RATIO;
        camera.updateProjectionMatrix();

        for (let y = 0; y < AMOUNT; y++) {
            for (let x = 0; x < AMOUNT; x++) {
                const subcamera = camera.cameras[AMOUNT * y + x];

                subcamera.viewport.set(
                    Math.floor(x * WIDTH),
                    Math.floor(y * HEIGHT),
                    Math.ceil(WIDTH),
                    Math.ceil(HEIGHT),
                );

                subcamera.aspect = ASPECT_RATIO;
                subcamera.updateProjectionMatrix();
            }
        }

        renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
        renderer.render(scene, camera);

        requestAnimationFrame(animate);
    }
</script>
<style>
    main {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
    #wall-wrapper {
        width: 100%;
        height: 95vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        position: relative;
        /* padding: 1rem; */
    }
    #wall-wrapper :global(canvas) {
        width: 100%;
        height: 100%;
        min-width: 100%;
        min-height: 100%;
    }
    .info {
        position: absolute;
        top: 20px;
        right: 20px;
        width: 250px;
        margin: 0px;
        padding: 10px;
        outline: 1px solid #ccc;
        color: #777;
        background: white;
        font-size: 80%;
    }
</style>
