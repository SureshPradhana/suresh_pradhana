---
import Layout from "../../layouts/Layout.astro";
import "../../styles/global.css";
---

<Layout title="wall Drawing">
    <main>
        <div id="wall-wrapper">
            <div class="info">
                <details id="wallLabel">
                    <summary>
                        <strong>Sphere animation</strong><br />
                        <!-- <em>Wall Drawing #11</em>, 1969 -->
                    </summary>
                    <p style="font-size: 150%"></p>
                    <p>
                        <em>Implemented by</em>
                        <strong>Suresh Pradhana</strong>, 2024<br />
                        <em style="font-size: 80%"
                            >HTML, CSS and JavaScript with canvas-sketch,ThreeJs</em
                        >
                    </p>
                </details>
            </div>
        </div>
    </main>
</Layout>

<script>
    import * as THREE from "three";

    import { canvasSketch } from "canvas-sketch";
    import { random } from "canvas-sketch-util";
    import palettes from "nice-color-palettes";

    const settings = {
        parent: document.getElementById("wall-wrapper"),
        animate: true,
        dimensions: [1024, 1280],
        // Get a WebGL canvas rather than 2D
        context: "webgl",
        // Turn on MSAA
        attributes: { antialias: true },
    };

    const sketch = ({ context, width, height }) => {
        // Create a renderer
        context.color = "#2e2e2e";
        const renderer = new THREE.WebGLRenderer({
            context,
        });

        // WebGL background color
        renderer.setClearColor("#2e2e2e", 1);

        // Setup a camera, we will update its settings on resize
        const camera = new THREE.OrthographicCamera();

        // Setup your scene
        const scene = new THREE.Scene();

        // Get a palette for our scene
        const palette = random.pick(palettes);

        // Randomize mesh attributes
        const randomizeMesh = (mesh) => {
            // Choose a random point in a 3D volume between -1..1
            const point = new THREE.Vector3(
                random.value() * 2 - 1,
                random.value() * 2 - 1,
                random.value() * 2 - 1,
            );
            mesh.position.copy(point);
            mesh.originalPosition = mesh.position.clone();

            // Choose a color for the mesh material
            mesh.material.color.set(random.pick(palette));

            // Randomly scale each axis
            mesh.scale.set(
                random.gaussian(),
                random.gaussian(),
                random.gaussian(),
            );

            // Do more random scaling on each axis
            if (random.chance(0.5)) mesh.scale.x *= random.gaussian();
            if (random.chance(0.5)) mesh.scale.y *= random.gaussian();
            if (random.chance(0.5)) mesh.scale.z *= random.gaussian();

            // Further scale each object
            mesh.scale.multiplyScalar(random.gaussian() * 0.25);
        };

        // A group that will hold all of our cubes
        const container = new THREE.Group();

        // Re-use the same Geometry across all our cubes
        const geometry =new THREE.SphereGeometry(0.5, 32, 16);

        // The # of cubes to create
        const chunks = 40;

        // Create each cube and return a THREE.Mesh
        const meshes = Array.from(new Array(chunks)).map(() => {
            // Basic "unlit" material with no depth
            const material = new THREE.MeshStandardMaterial({
                // Avoid popping
                depthTest: false,
                color: random.pick(palette),
            });

            // Create the mesh
            const mesh = new THREE.Mesh(geometry, material);

            // Randomize it
            randomizeMesh(mesh);

            return mesh;
        });

        // Add meshes to the group
        meshes.forEach((m) => container.add(m));

        // Then add the group to the scene
        scene.add(container);

        // light
        const light = new THREE.DirectionalLight("white", 1);
        light.position.set(0, 0, 2);
        scene.add(light);

        // draw each frame
        return {
            // Handle resize events here
            resize({ pixelRatio, viewportWidth, viewportHeight }) {
                renderer.setPixelRatio(pixelRatio);
                renderer.setSize(viewportWidth, viewportHeight);

                // Setup an isometric perspective
                const aspect = viewportWidth / viewportHeight;
                const zoom = 1.85;
                camera.left = -zoom * aspect;
                camera.right = zoom * aspect;
                camera.top = zoom;
                camera.bottom = -zoom;
                camera.near = -100;
                camera.far = 100;
                camera.position.set(zoom, zoom, zoom);
                camera.lookAt(new THREE.Vector3());

                // Update camera properties
                camera.updateProjectionMatrix();
            },
            // And render events here
            render({ time, deltaTime, width, height }) {
                // Animate each mesh with noise
                meshes.forEach((mesh) => {
                    const f = 0.5;
                    mesh.position.x =
                        mesh.originalPosition.x +
                        0.25 *
                            random.noise3D(
                                mesh.originalPosition.x * f,
                                mesh.originalPosition.y * f,
                                mesh.originalPosition.z * f,
                                time * 0.5,
                            );
                });

                // Draw scene with our camera
                renderer.render(scene, camera);
            },
            
            // Dispose of WebGL context (optional)
            unload() {
                renderer.dispose();
            },
        };
    };


    canvasSketch(sketch, settings);
</script>
<style>
    main {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
    #wall-wrapper {
        width: 100%;
        height: 95vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        position: relative;
        padding: 1rem;
    }
    #wall-wrapper :global(canvas) {
        width: 60%;
        height: 60%;
    }
    .info {
        position: absolute;
        top: 20px;
        right: 20px;
        width: 250px;
        margin: 0px;
        padding: 10px;
        outline: 1px solid #ccc;
        color: #777;
        background: white;
        font-size: 80%;
    }
</style>
